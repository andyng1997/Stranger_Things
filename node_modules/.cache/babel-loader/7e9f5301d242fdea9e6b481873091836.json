{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT';\nexport const getPosts = async token => {\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.log('error getting all posts');\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.log('error registering user');\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          password\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('There was an error loggin in the user');\n  }\n};\nexport const getUserDetails = async token => {\n  try {\n    const response = await fetch(`${baseURL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (ex) {\n    console.log('error getting users details');\n  }\n};\nexport const createPost = async (token, _ref) => {\n  let {\n    title,\n    description,\n    price,\n    location,\n    willDeliver\n  } = _ref;\n  try {\n    const response = await fetch(`${baseURL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('There was an error with creating a new post');\n  }\n};\nexport const deletePost = async (token, postID) => {\n  console.log(postID);\n  try {\n    const response = await fetch(`${baseURL}/posts/${postID}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    return data;\n  } catch (ex) {\n    console.log(error);\n    console.log('error deleting post');\n  }\n};\nexport const updatePost = async _ref2 => {\n  let {\n    token,\n    title,\n    description,\n    price,\n    location,\n    willDeliver,\n    _id\n  } = _ref2;\n  try {\n    const response = await fetch(`${baseURL}/posts/${postID}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      })\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('There was error updating post');\n  }\n};\nexport const createMessage = async _ref3 => {\n  let {\n    postID,\n    token,\n    message\n  } = _ref3;\n  try {\n    const respons = await fetch(`${baseURL}/posts/${postID}/messages`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        message\n      })\n    });\n  } catch (error) {\n    console.error('There was an error creating the message');\n  }\n};","map":{"version":3,"names":["baseURL","getPosts","token","response","fetch","headers","results","json","error","console","log","registerUser","username","password","method","body","JSON","stringify","user","result","loginUser","getUserDetails","ex","createPost","title","description","price","location","willDeliver","post","deletePost","postID","data","updatePost","_id","createMessage","message","respons"],"sources":["C:/Users/Andy/Documents/GitHub/Stranger Things/src/api/api.js"],"sourcesContent":["const baseURL = 'https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT'\r\n\r\nexport const getPosts = async(token) => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/posts`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    const results = await response.json();\r\n    return results;\r\n  } catch(error) {\r\n    console.log('error getting all posts')\r\n  }\r\n}\r\n\r\n\r\nexport const registerUser = async (username, password) => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/users/register`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        user: {\r\n          username: username,\r\n          password: password\r\n        }\r\n      })\r\n    })\r\n    const result = await response.json();\r\n    return result;\r\n  } catch(error) {\r\n    console.log('error registering user')\r\n  }\r\n}\r\n\r\nexport const loginUser = async (username, password) => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/users/login`,{\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        user: {\r\n          username,\r\n          password\r\n        }\r\n      })\r\n    })\r\n    \r\n    const result = await response.json();\r\n    \r\n    return result;\r\n    \r\n  } catch(error) {\r\n    console.error('There was an error loggin in the user')\r\n  }\r\n}\r\n\r\n\r\nexport const getUserDetails = async (token) => {\r\n  try {\r\n    const response = await fetch(`${baseURL}/users/me`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n    })\r\n    \r\n    const result = await response.json();\r\n    return result;\r\n    \r\n  } catch(ex) {\r\n    console.log('error getting users details')\r\n  }\r\n}\r\n\r\n\r\nexport const createPost = async (token, {title, description, price, location, willDeliver})=> {\r\n  try {\r\n    const response = await fetch(`${baseURL}/posts`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        post: {\r\n          title,\r\n          description,\r\n          price,\r\n          location,\r\n          willDeliver\r\n        }\r\n      })\r\n    })\r\n    \r\n    const result = await response.json();\r\n    return result;\r\n  } catch(error) {\r\n    console.error('There was an error with creating a new post')\r\n  }\r\n}\r\n\r\nexport const deletePost = async (token, postID) => {\r\n  console.log(postID)\r\n  try{\r\n    const response = await fetch(`${baseURL}/posts/${postID}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n})\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch(ex) {\r\n    console.log(error)\r\n    console.log('error deleting post')\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport const updatePost = async ({token, title, description, price, location, willDeliver, _id})=> {\r\n  try {\r\n    const response = await fetch(`${baseURL}/posts/${postID}`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        post: {\r\n          title,\r\n          description,\r\n          price,\r\n          location,\r\n          willDeliver\r\n        }\r\n      })\r\n    })\r\n    \r\n    const result = await response.json();\r\n    return result;  \r\n  } catch(error) {\r\n    console.error('There was error updating post')\r\n  }\r\n}\r\n\r\n\r\nexport const createMessage = async ({postID, token, message}) => {\r\n  try {\r\n    const respons = await fetch(`${baseURL}/posts/${postID}/messages`, {\r\n     method: 'POST',\r\n     headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n     },\r\n     body: JSON.stringify({\r\n      message\r\n     })\r\n    })\r\n  } catch(error) {\r\n    console.error('There was an error creating the message')\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}